// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  directUrl = env("DIRECT_DATABASE_URL")
  url       = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  bookmarks     bookmark[]
  spaces        space[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model bookmark {
  id          String    @id @default(cuid())
  name        String
  description String?
  url         String
  thumbnail   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reminder    DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId       String?
  SpaceBookmark SpaceBookmark[]
}

model space {
  id            String          @id @default(cuid())
  name          String
  icon          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic      Boolean         @default(false)
  ownerId       String
  SpaceBookmark SpaceBookmark[]
}

model SpaceBookmark {
  spaceId    String
  bookmarkId String
  createdAt  DateTime @default(now())
  space    space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  bookmark bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  @@id([spaceId, bookmarkId])
}


//create metadata table for bookmarks to have mroe info for embeddings